#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
#funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
#entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n == 0 or n == 1:       # Caso base
        return 1
    else:                      # Paso recursivo
        return n * factorial(n - 1)

# Programa principal
num = int(input("Ingrese un n√∫mero entero positivo: "))
for i in range(1, num + 1):
    print(f"{i}! = {factorial(i)}")


#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
#indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
#especifique.

def fibonacci(n):
    if n == 0:                # Caso base 1
        return 0
    elif n == 1:              # Caso base 2
        return 1
    else:                     # Paso recursivo
        return fibonacci(n - 1) + fibonacci(n - 2)

# Programa principal
num = int(input("\nIngrese hasta qu√© posici√≥n mostrar la serie de Fibonacci: "))
for i in range(num):
    print(fibonacci(i), end=" ")
print()


#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
#exponente, utilizando la f√≥rmula ùëõ
#ùëö = ùëõ ‚àó ùëõ      (ùëö‚àí1) . Prueba esta funci√≥n en un algoritmo general.
def potencia(base, exponente):
    if exponente == 0:        # Caso base
        return 1
    else:                     # Paso recursivo
        return base * potencia(base, exponente - 1)

# Programa principal
base = int(input("\nIngrese la base: "))
exp = int(input("Ingrese el exponente: "))
print(f"{base}^{exp} = {potencia(base, exp)}")



#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva 
# su representaci√≥n en binario como una cadena de texto.
#Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. 

def decimal_a_binario(n):
    if n == 0:                # Caso base
        return ""
    else:                     # Paso recursivo
        return decimal_a_binario(n // 2) + str(n % 2)

# Programa principal
num = int(input("\nIngrese un n√∫mero decimal para convertir a binario: "))
if num == 0:
    print("0")
else:
    print(f"El n√∫mero {num} en binario es: {decimal_a_binario(num)}")


#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
#cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
#lo es.
# Requisitos:
#La soluci√≥n debe ser recursiva.
#No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    if len(palabra) <= 1:     # Caso base
        return True
    elif palabra[0] != palabra[-1]:  # Si los extremos no coinciden
        return False
    else:                     # Paso recursivo
        return es_palindromo(palabra[1:-1])

# Programa principal
texto = input("\nIngrese una palabra sin espacios ni tildes: ").lower()
print(f"¬øEs pal√≠ndromo? {es_palindromo(texto)}")


#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
#n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.


def suma_digitos(n):
    if n < 10:                # Caso base: un solo d√≠gito
        return n
    else:                     # Paso recursivo
        return (n % 10) + suma_digitos(n // 10)

# Programa principal
num = int(input("\nIngrese un n√∫mero entero positivo: "))
print(f"La suma de los d√≠gitos de {num} es: {suma_digitos(num)}")


#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
#bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
#√∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
#nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
#pir√°mide.
def contar_bloques(n):
    if n == 1:                # Caso base
        return 1
    else:                     # Paso recursivo
        return n + contar_bloques(n - 1)

# Programa principal
niveles = int(input("\nIngrese la cantidad de bloques en el nivel m√°s bajo: "))
print(f"Total de bloques necesarios: {contar_bloques(niveles)}")


#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
#n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
#aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    if numero == 0:           # Caso base
        return 0
    else:                     # Paso recursivo
        if numero % 10 == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

# Programa principal
numero = int(input("\nIngrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese el d√≠gito a contar (0-9): "))
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en {numero}.")


